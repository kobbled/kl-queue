PROGRAM class_name
%NOBUSYLAMP
%COMMENT = 'priority queue'
%NOLOCKGROUP
%NOPAUSE = COMMAND + TPENABLE + ERROR

%include namespace.m

-- declare type
%include define_type.m

%include errors.klt
%include systemlib.types.klt

--print user defined struct
%ifdef queue_type_define
queue_type_define(class_name)
%endif

VAR
  data : PATH nodedata = QUEUETYPE

%include errors.klh
%from strings.klh %import i_to_s
%include priority_queue.klh
%include priority_queue.private.klh

--private

ROUTINE clear
  VAR
    i, status : INTEGER
  BEGIN
    i = PATH_LEN(data)
    WHILE PATH_LEN(data) > 0 DO
		  DELETE_NODE(data,i,status)
      CHK_STAT(status)
      i = i - 1
	  ENDWHILE
  END clear

ROUTINE insert
  VAR
    i, status : INTEGER
  BEGIN
    IF (seq_no > PATH_LEN(data)) THEN
      REPEAT
        APPEND_NODE(data,status)
        CHK_STAT(status)
      UNTIL(PATH_LEN(data) = seq_no)
    ENDIF

    IF (NOT UNINIT(data[seq_no].QUEUE_INDEX_NAME)) THEN
      INSERT_NODE(data, seq_no, status)
      CHK_STAT(status)
    ENDIF

    data[seq_no] = val

  END insert

ROUTINE get
  BEGIN

    IF (PATH_LEN(data) = 0) THEN
      karelError(QUEUE_IS_EMPTY,'queue is empty in class_name.', ER_ABORT)
    ENDIF

    IF (seq_no = 0) OR (seq_no > PATH_LEN(data)) THEN
      karelError(QUEUE_BAD_SEQUENCE_NO,'bad sequence number in class_name.', ER_ABORT)
    ENDIF

    RETURN(data[seq_no].QUEUE_INDEX_NAME)

  END get

-- public

ROUTINE init
  BEGIN
    clear
  END init

ROUTINE push
  VAR
    i : INTEGER
    new : QUEUETYPE
  BEGIN
    --create a new node
    new.QUEUE_INDEX_NAME = val
    new.QUEUE_PRIORITY_NAME = priority

    IF (PATH_LEN(data) = 0) THEN
      insert(1, new)
      RETURN
    ENDIF

    --if new priority is greater than the head
    --insert new node before the head
    IF (new.QUEUE_PRIORITY_NAME > data[1].QUEUE_PRIORITY_NAME) THEN
      insert(1, new)
    ELSE
      i = 1
      --traverse list until new node priority is greater than the next node
      WHILE ((i < PATH_LEN(data)) AND (new.QUEUE_PRIORITY_NAME < data[i].QUEUE_PRIORITY_NAME)) DO
        i = i + 1
      ENDWHILE
      --evaluate with last node if reached end of list
      IF (i = PATH_LEN(data)) AND (new.QUEUE_PRIORITY_NAME < data[i].QUEUE_PRIORITY_NAME) THEN
        i = i + 1
      ENDIF

      insert(i, new)

    ENDIF
  END push

ROUTINE pop
  VAR
    val : QUEUE_INDEX_TYPE
    status : INTEGER
  BEGIN
    -- get queue value
    val = get(1)

    --remove from array
    DELETE_NODE(data,1,status)
    CHK_STAT(status)

    RETURN(val)
  END pop

ROUTINE pop_min
  VAR
    val : QUEUE_INDEX_TYPE
    status : INTEGER
  BEGIN
    -- get queue value
    val = get(PATH_LEN(data))

    --remove from array
    DELETE_NODE(data,PATH_LEN(data),status)
    CHK_STAT(status)

    RETURN(val)
  END pop_min

ROUTINE copy
  VAR
    status : INTEGER
  BEGIN
    COPY_PATH(data, 0, 0, out_data, status)
    CHK_STAT(status)
  END copy

ROUTINE empty
  BEGIN
    IF PATH_LEN(data) > 0 THEN
      RETURN(FALSE)
    ELSE
      RETURN(TRUE)
    ENDIF
  END empty

ROUTINE size
  BEGIN
    RETURN(PATH_LEN(data))
  END size

ROUTINE front
  BEGIN
    RETURN(data[1].QUEUE_INDEX_NAME)
  END front

ROUTINE back
  BEGIN
    RETURN(data[PATH_LEN(data)].QUEUE_INDEX_NAME)
  END back


BEGIN
END class_name
